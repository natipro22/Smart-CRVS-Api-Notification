// <auto-generated />
using System;
using AppDiv.CRVS.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AppDiv.CRVS.Infrastructure.Migrations
{
    [DbContext(typeof(CRVSDbContext))]
    partial class CRVSDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("AppDiv.CRVS.Domain.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("Otp")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("OtpExpiredDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<Guid>("PersonalInfoId")
                        .HasColumnType("char(36)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.HasIndex("PersonalInfoId");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("AppDiv.CRVS.Domain.Entities.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("AddressNameStr")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("AdminLevel")
                        .HasColumnType("int");

                    b.Property<Guid?>("AreaTypeLookupId")
                        .IsRequired()
                        .HasColumnType("char(36)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("ParentAddressId")
                        .HasColumnType("char(36)");

                    b.Property<string>("StatisticCode")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("AreaTypeLookupId");

                    b.HasIndex("ParentAddressId");

                    b.ToTable("Addresses", (string)null);
                });

            modelBuilder.Entity("AppDiv.CRVS.Domain.Entities.AdoptionEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("AdoptiveFatherId")
                        .IsRequired()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("AdoptiveMotherId")
                        .IsRequired()
                        .HasColumnType("char(36)");

                    b.Property<string>("ApprovedNameStr")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("BeforeAdoptionAddressId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("CourtCaseId")
                        .IsRequired()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("EventId")
                        .IsRequired()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("char(36)");

                    b.Property<string>("ReasonStr")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("AdoptiveFatherId")
                        .IsUnique();

                    b.HasIndex("AdoptiveMotherId")
                        .IsUnique();

                    b.HasIndex("BeforeAdoptionAddressId")
                        .IsUnique();

                    b.HasIndex("CourtCaseId")
                        .IsUnique();

                    b.HasIndex("EventId")
                        .IsUnique();

                    b.ToTable("AdoptionEvents", (string)null);
                });

            modelBuilder.Entity("AppDiv.CRVS.Domain.Entities.Audit.AuditLog", b =>
                {
                    b.Property<Guid>("AuditId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("AuditData")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("AuditDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("AuditUserId")
                        .HasColumnType("char(36)");

                    b.Property<string>("EntityType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Enviroment")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("TablePk")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("AuditId");

                    b.ToTable("AuditLogs", (string)null);
                });

            modelBuilder.Entity("AppDiv.CRVS.Domain.Entities.BirthEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("BirthPlaceId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("EventId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("FacilityId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("FacilityTypeId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("FatherId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("MotherId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("TypeOfBirthId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("BirthPlaceId");

                    b.HasIndex("EventId")
                        .IsUnique();

                    b.HasIndex("FacilityId");

                    b.HasIndex("FacilityTypeId");

                    b.HasIndex("FatherId")
                        .IsUnique();

                    b.HasIndex("MotherId")
                        .IsUnique();

                    b.HasIndex("TypeOfBirthId");

                    b.ToTable("birthEvents", (string)null);
                });

            modelBuilder.Entity("AppDiv.CRVS.Domain.Entities.BirthNotification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("BirthEventId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("DeliveryTypeId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("char(36)");

                    b.Property<string>("NotficationSerialNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("SkilledProfId")
                        .HasColumnType("char(36)");

                    b.Property<float>("WeghtAtBirth")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("BirthEventId")
                        .IsUnique();

                    b.HasIndex("DeliveryTypeId");

                    b.HasIndex("SkilledProfId");

                    b.ToTable("BirthNotifications", (string)null);
                });

            modelBuilder.Entity("AppDiv.CRVS.Domain.Entities.Certificate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<bool>("AuthenticationStatus")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("CertificateSerialNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ContentStr")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("EventId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("char(36)");

                    b.Property<int>("PrintCont")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("Certificates", (string)null);
                });

            modelBuilder.Entity("AppDiv.CRVS.Domain.Entities.CertificateTemplate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("CertificateType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.ToTable("CertificateTemplates", (string)null);
                });

            modelBuilder.Entity("AppDiv.CRVS.Domain.Entities.ContactInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("char(36)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("HouseNumber")
                        .HasColumnType("longtext");

                    b.Property<string>("Linkdin")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("char(36)");

                    b.Property<string>("Phone")
                        .HasColumnType("longtext");

                    b.Property<string>("Website")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("ContactInfo", (string)null);
                });

            modelBuilder.Entity("AppDiv.CRVS.Domain.Entities.Court", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("AddressId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("char(36)");

                    b.Property<string>("DescriptionStr")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("char(36)");

                    b.Property<string>("NameStr")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("AddressId")
                        .IsUnique();

                    b.ToTable("Courts", (string)null);
                });

            modelBuilder.Entity("AppDiv.CRVS.Domain.Entities.CourtCase", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("ConfirmedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CourtCaseNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("CourtId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("CourtId");

                    b.ToTable("CourtCases", (string)null);
                });

            modelBuilder.Entity("AppDiv.CRVS.Domain.Entities.DeathEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("char(36)");

                    b.Property<string>("DuringDeath")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("EventId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("FacilityId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("FacilityTypeId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("char(36)");

                    b.Property<string>("PlaceOfFuneral")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("EventId")
                        .IsUnique();

                    b.HasIndex("FacilityId");

                    b.HasIndex("FacilityTypeId");

                    b.ToTable("DeathEvents", (string)null);
                });

            modelBuilder.Entity("AppDiv.CRVS.Domain.Entities.DeathNotification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("CauseOfDeath")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("CauseOfDeathInfoTypeId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("DeathEventId")
                        .HasColumnType("char(36)");

                    b.Property<string>("DeathNotificationSerialNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("CauseOfDeathInfoTypeId");

                    b.HasIndex("DeathEventId")
                        .IsUnique();

                    b.ToTable("DeathNotifications", (string)null);
                });

            modelBuilder.Entity("AppDiv.CRVS.Domain.Entities.DivorceEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("CourtCaseId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("DataOfMarriage")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DivorceDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DivorceReasonStr")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("DivorcedWifeId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("EventId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("char(36)");

                    b.Property<int>("NumberChildren")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CourtCaseId")
                        .IsUnique();

                    b.HasIndex("DivorcedWifeId")
                        .IsUnique();

                    b.HasIndex("EventId")
                        .IsUnique();

                    b.ToTable("DivorceEvents", (string)null);
                });

            modelBuilder.Entity("AppDiv.CRVS.Domain.Entities.Event", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("CivilRegOfficerId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("EventAddressId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("EventDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("EventOwenerId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("EventRegDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("InformantTypeLookupId")
                        .HasColumnType("char(36)");

                    b.Property<bool>("IsCertified")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsExampted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("CivilRegOfficerId");

                    b.HasIndex("EventAddressId");

                    b.HasIndex("EventOwenerId");

                    b.HasIndex("InformantTypeLookupId");

                    b.ToTable("Events", (string)null);
                });

            modelBuilder.Entity("AppDiv.CRVS.Domain.Entities.Lookup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Code")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("char(36)");

                    b.Property<string>("DescriptionStr")
                        .HasColumnType("longtext");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("char(36)");

                    b.Property<string>("StatisticCode")
                        .HasColumnType("longtext");

                    b.Property<string>("ValueStr")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Lookups", (string)null);
                });

            modelBuilder.Entity("AppDiv.CRVS.Domain.Entities.MarriageApplication", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ApplicationAddressId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("ApplicationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("BrideInfoId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("CivilRegOfficerId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("GroomInfoId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationAddressId");

                    b.HasIndex("BrideInfoId")
                        .IsUnique();

                    b.HasIndex("CivilRegOfficerId")
                        .IsUnique();

                    b.HasIndex("GroomInfoId")
                        .IsUnique();

                    b.ToTable("MarriageApplications", (string)null);
                });

            modelBuilder.Entity("AppDiv.CRVS.Domain.Entities.MarriageEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("BrideInfoId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("EventId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("MarriageTypeId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId")
                        .IsUnique();

                    b.HasIndex("BrideInfoId")
                        .IsUnique();

                    b.HasIndex("EventId")
                        .IsUnique();

                    b.HasIndex("MarriageTypeId");

                    b.ToTable("MarriageEvents", (string)null);
                });

            modelBuilder.Entity("AppDiv.CRVS.Domain.Entities.Payment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("BillNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("PaymentRequestId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("PaymentWayLookupId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("PaymentRequestId")
                        .IsUnique();

                    b.HasIndex("PaymentWayLookupId");

                    b.ToTable("Payments", (string)null);
                });

            modelBuilder.Entity("AppDiv.CRVS.Domain.Entities.PaymentExamption", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("EventId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ExamptionRequestId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("EventId")
                        .IsUnique();

                    b.HasIndex("ExamptionRequestId")
                        .IsUnique();

                    b.ToTable("PaymentExamptions", (string)null);
                });

            modelBuilder.Entity("AppDiv.CRVS.Domain.Entities.PaymentExamptionRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("char(36)");

                    b.Property<string>("ExamptedBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ExamptedClientFullNAme")
                        .HasColumnType("longtext");

                    b.Property<string>("ExamptedClientId")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("ExamptedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("char(36)");

                    b.Property<string>("NumberOfClient")
                        .HasColumnType("longtext");

                    b.Property<string>("ReasonStr")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("PaymentExamptionRequests", (string)null);
                });

            modelBuilder.Entity("AppDiv.CRVS.Domain.Entities.PaymentRate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("AddressId")
                        .HasColumnType("char(36)");

                    b.Property<float>("Amount")
                        .HasColumnType("float");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("EventLookupId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("PaymentTypeLookupId")
                        .HasColumnType("char(36)");

                    b.Property<bool>("Status")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("EventLookupId");

                    b.HasIndex("PaymentTypeLookupId");

                    b.ToTable("PaymentRates", (string)null);
                });

            modelBuilder.Entity("AppDiv.CRVS.Domain.Entities.PaymentRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<float>("Amount")
                        .HasColumnType("float");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("EventId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("PaymentRateId")
                        .HasColumnType("char(36)");

                    b.Property<string>("ReasonStr")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("status")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex("EventId")
                        .IsUnique();

                    b.HasIndex("PaymentRateId")
                        .IsUnique();

                    b.ToTable("PaymentRequests", (string)null);
                });

            modelBuilder.Entity("AppDiv.CRVS.Domain.Entities.PersonalInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("AddressId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("ContactInfoId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("EducationalStatusLookupId")
                        .HasColumnType("char(36)");

                    b.Property<string>("FirstNameStr")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("LastNameStr")
                        .HasColumnType("longtext");

                    b.Property<Guid?>("MarriageStatusLookupId")
                        .HasColumnType("char(36)");

                    b.Property<string>("MiddleNameStr")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("NationLookupId")
                        .HasColumnType("char(36)");

                    b.Property<string>("NationalId")
                        .HasColumnType("longtext");

                    b.Property<Guid?>("NationalityLookupId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("PlaceOfBirthLookupId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("ReligionLookupId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("SexLookupId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("TitleLookupId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("TypeOfWorkLookupId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("ContactInfoId");

                    b.HasIndex("EducationalStatusLookupId");

                    b.HasIndex("MarriageStatusLookupId");

                    b.HasIndex("NationLookupId");

                    b.HasIndex("NationalityLookupId");

                    b.HasIndex("PlaceOfBirthLookupId");

                    b.HasIndex("ReligionLookupId");

                    b.HasIndex("SexLookupId");

                    b.HasIndex("TitleLookupId");

                    b.HasIndex("TypeOfWorkLookupId");

                    b.ToTable("PersonalInfos", (string)null);
                });

            modelBuilder.Entity("AppDiv.CRVS.Domain.Entities.Registrar", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("EventId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("RegistrarInfoId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("RelationshipId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("EventId")
                        .IsUnique();

                    b.HasIndex("RegistrarInfoId")
                        .IsUnique();

                    b.HasIndex("RelationshipId");

                    b.ToTable("Registrars", (string)null);
                });

            modelBuilder.Entity("AppDiv.CRVS.Domain.Entities.Setting", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("char(36)");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("char(36)");

                    b.Property<string>("ValueStr")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Settings", (string)null);
                });

            modelBuilder.Entity("AppDiv.CRVS.Domain.Entities.Step", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("char(36)");

                    b.Property<string>("DescriptionStr")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("char(36)");

                    b.Property<decimal>("Payment")
                        .HasColumnType("decimal(65,30)");

                    b.Property<bool>("Status")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid?>("UserGroupId")
                        .IsRequired()
                        .HasColumnType("char(36)");

                    b.Property<int>("step")
                        .HasColumnType("int");

                    b.Property<Guid>("workflowId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("UserGroupId");

                    b.HasIndex("workflowId");

                    b.ToTable("Steps", (string)null);
                });

            modelBuilder.Entity("AppDiv.CRVS.Domain.Entities.SupportingDocument", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("char(36)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("DocumentUrl")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid?>("EventId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("PaymentExamptionId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("PaymentExamptionId");

                    b.ToTable("SupportingDocuments", (string)null);
                });

            modelBuilder.Entity("AppDiv.CRVS.Domain.Entities.UserGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("char(36)");

                    b.Property<string>("DescriptionStr")
                        .HasColumnType("longtext");

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("char(36)");

                    b.Property<string>("RolesStr")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("UserGroups", (string)null);
                });

            modelBuilder.Entity("AppDiv.CRVS.Domain.Entities.Witness", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("MarriageEventId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("char(36)");

                    b.Property<string>("WitnessFor")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("WitnessPersonalInfoId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("MarriageEventId");

                    b.HasIndex("WitnessPersonalInfoId")
                        .IsUnique();

                    b.ToTable("Witnesses", (string)null);
                });

            modelBuilder.Entity("AppDiv.CRVS.Domain.Entities.Workflow", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("char(36)");

                    b.Property<string>("DescriptionStr")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("char(36)");

                    b.Property<string>("workflowName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Workflows", (string)null);
                });

            modelBuilder.Entity("ApplicationUserUserGroup", b =>
                {
                    b.Property<string>("ApplicationUsersId")
                        .HasColumnType("varchar(255)");

                    b.Property<Guid>("UserGroupsId")
                        .HasColumnType("char(36)");

                    b.HasKey("ApplicationUsersId", "UserGroupsId");

                    b.HasIndex("UserGroupsId");

                    b.ToTable("ApplicationUserUserGroup", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("AppDiv.CRVS.Domain.ApplicationUser", b =>
                {
                    b.HasOne("AppDiv.CRVS.Domain.Entities.PersonalInfo", "PersonalInfo")
                        .WithMany()
                        .HasForeignKey("PersonalInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PersonalInfo");
                });

            modelBuilder.Entity("AppDiv.CRVS.Domain.Entities.Address", b =>
                {
                    b.HasOne("AppDiv.CRVS.Domain.Entities.Lookup", "AreaTypeLookup")
                        .WithMany("AddressAreaTypeNavigation")
                        .HasForeignKey("AreaTypeLookupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AppDiv.CRVS.Domain.Entities.Address", "ParentAddress")
                        .WithMany("ChildAddresses")
                        .HasForeignKey("ParentAddressId");

                    b.Navigation("AreaTypeLookup");

                    b.Navigation("ParentAddress");
                });

            modelBuilder.Entity("AppDiv.CRVS.Domain.Entities.AdoptionEvent", b =>
                {
                    b.HasOne("AppDiv.CRVS.Domain.Entities.PersonalInfo", "AdoptiveFather")
                        .WithOne("AdoptiveFatherNavigation")
                        .HasForeignKey("AppDiv.CRVS.Domain.Entities.AdoptionEvent", "AdoptiveFatherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AppDiv.CRVS.Domain.Entities.PersonalInfo", "AdoptiveMother")
                        .WithOne("AdoptiveMotherNavigation")
                        .HasForeignKey("AppDiv.CRVS.Domain.Entities.AdoptionEvent", "AdoptiveMotherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AppDiv.CRVS.Domain.Entities.Address", "BeforeAdoptionAddress")
                        .WithOne("BeforeAdoptionAddressNavigation")
                        .HasForeignKey("AppDiv.CRVS.Domain.Entities.AdoptionEvent", "BeforeAdoptionAddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AppDiv.CRVS.Domain.Entities.CourtCase", "CourtCase")
                        .WithOne("AdoptionEventCourtCase")
                        .HasForeignKey("AppDiv.CRVS.Domain.Entities.AdoptionEvent", "CourtCaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AppDiv.CRVS.Domain.Entities.Event", "Event")
                        .WithOne("AdoptionEvent")
                        .HasForeignKey("AppDiv.CRVS.Domain.Entities.AdoptionEvent", "EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AdoptiveFather");

                    b.Navigation("AdoptiveMother");

                    b.Navigation("BeforeAdoptionAddress");

                    b.Navigation("CourtCase");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("AppDiv.CRVS.Domain.Entities.BirthEvent", b =>
                {
                    b.HasOne("AppDiv.CRVS.Domain.Entities.Address", "BirthPlace")
                        .WithMany("AddressBirthPlaceNavigation")
                        .HasForeignKey("BirthPlaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AppDiv.CRVS.Domain.Entities.Event", "Event")
                        .WithOne("BirthEvent")
                        .HasForeignKey("AppDiv.CRVS.Domain.Entities.BirthEvent", "EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AppDiv.CRVS.Domain.Entities.Lookup", "Facility")
                        .WithMany("BirthFacilityNavigation")
                        .HasForeignKey("FacilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AppDiv.CRVS.Domain.Entities.Lookup", "FacilityType")
                        .WithMany("BirthFacilityTypeNavigation")
                        .HasForeignKey("FacilityTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AppDiv.CRVS.Domain.Entities.PersonalInfo", "Father")
                        .WithOne("BirthFatherNavigation")
                        .HasForeignKey("AppDiv.CRVS.Domain.Entities.BirthEvent", "FatherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AppDiv.CRVS.Domain.Entities.PersonalInfo", "Mother")
                        .WithOne("BirthMotherNavigation")
                        .HasForeignKey("AppDiv.CRVS.Domain.Entities.BirthEvent", "MotherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AppDiv.CRVS.Domain.Entities.Lookup", "TypeOfBirth")
                        .WithMany("BirthTypeOfBirthNavigation")
                        .HasForeignKey("TypeOfBirthId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BirthPlace");

                    b.Navigation("Event");

                    b.Navigation("Facility");

                    b.Navigation("FacilityType");

                    b.Navigation("Father");

                    b.Navigation("Mother");

                    b.Navigation("TypeOfBirth");
                });

            modelBuilder.Entity("AppDiv.CRVS.Domain.Entities.BirthNotification", b =>
                {
                    b.HasOne("AppDiv.CRVS.Domain.Entities.BirthEvent", "BirthEvent")
                        .WithOne("BirthNotification")
                        .HasForeignKey("AppDiv.CRVS.Domain.Entities.BirthNotification", "BirthEventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AppDiv.CRVS.Domain.Entities.Lookup", "DeliveryType")
                        .WithMany("DeliveryTypeNavigation")
                        .HasForeignKey("DeliveryTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AppDiv.CRVS.Domain.Entities.Lookup", "SkilledProf")
                        .WithMany("SkilledProfNavigation")
                        .HasForeignKey("SkilledProfId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BirthEvent");

                    b.Navigation("DeliveryType");

                    b.Navigation("SkilledProf");
                });

            modelBuilder.Entity("AppDiv.CRVS.Domain.Entities.Certificate", b =>
                {
                    b.HasOne("AppDiv.CRVS.Domain.Entities.Event", "Event")
                        .WithMany("EventCertificates")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("AppDiv.CRVS.Domain.Entities.Court", b =>
                {
                    b.HasOne("AppDiv.CRVS.Domain.Entities.Address", "Address")
                        .WithOne("CourtAddress")
                        .HasForeignKey("AppDiv.CRVS.Domain.Entities.Court", "AddressId");

                    b.Navigation("Address");
                });

            modelBuilder.Entity("AppDiv.CRVS.Domain.Entities.CourtCase", b =>
                {
                    b.HasOne("AppDiv.CRVS.Domain.Entities.Court", "Court")
                        .WithMany()
                        .HasForeignKey("CourtId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Court");
                });

            modelBuilder.Entity("AppDiv.CRVS.Domain.Entities.DeathEvent", b =>
                {
                    b.HasOne("AppDiv.CRVS.Domain.Entities.Event", "Event")
                        .WithOne("DeathEventNavigation")
                        .HasForeignKey("AppDiv.CRVS.Domain.Entities.DeathEvent", "EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AppDiv.CRVS.Domain.Entities.Lookup", "Facility")
                        .WithMany("DeathFacilityNavigation")
                        .HasForeignKey("FacilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AppDiv.CRVS.Domain.Entities.Lookup", "FacilityType")
                        .WithMany("DeathFacilityTypeNavigation")
                        .HasForeignKey("FacilityTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("Facility");

                    b.Navigation("FacilityType");
                });

            modelBuilder.Entity("AppDiv.CRVS.Domain.Entities.DeathNotification", b =>
                {
                    b.HasOne("AppDiv.CRVS.Domain.Entities.Lookup", "CauseOfDeathInfoType")
                        .WithMany("CauseOfDeathInfoTypeNavigation")
                        .HasForeignKey("CauseOfDeathInfoTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AppDiv.CRVS.Domain.Entities.DeathEvent", "DeathEvent")
                        .WithOne("DeathNotification")
                        .HasForeignKey("AppDiv.CRVS.Domain.Entities.DeathNotification", "DeathEventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CauseOfDeathInfoType");

                    b.Navigation("DeathEvent");
                });

            modelBuilder.Entity("AppDiv.CRVS.Domain.Entities.DivorceEvent", b =>
                {
                    b.HasOne("AppDiv.CRVS.Domain.Entities.CourtCase", "CourtCase")
                        .WithOne("DivorceEventCourtCase")
                        .HasForeignKey("AppDiv.CRVS.Domain.Entities.DivorceEvent", "CourtCaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AppDiv.CRVS.Domain.Entities.PersonalInfo", "DivorcedWife")
                        .WithOne("DivorceWifeNavigation")
                        .HasForeignKey("AppDiv.CRVS.Domain.Entities.DivorceEvent", "DivorcedWifeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AppDiv.CRVS.Domain.Entities.Event", "Event")
                        .WithOne("DivorceEvent")
                        .HasForeignKey("AppDiv.CRVS.Domain.Entities.DivorceEvent", "EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CourtCase");

                    b.Navigation("DivorcedWife");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("AppDiv.CRVS.Domain.Entities.Event", b =>
                {
                    b.HasOne("AppDiv.CRVS.Domain.Entities.PersonalInfo", "CivilRegOfficer")
                        .WithMany("EventCivilRegOfficers")
                        .HasForeignKey("CivilRegOfficerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AppDiv.CRVS.Domain.Entities.Address", "EventAddress")
                        .WithMany("EventAddresses")
                        .HasForeignKey("EventAddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AppDiv.CRVS.Domain.Entities.PersonalInfo", "EventOwener")
                        .WithMany("Events")
                        .HasForeignKey("EventOwenerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AppDiv.CRVS.Domain.Entities.Lookup", "InformantTypeLookup")
                        .WithMany("EventInformantTypeNavigation")
                        .HasForeignKey("InformantTypeLookupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CivilRegOfficer");

                    b.Navigation("EventAddress");

                    b.Navigation("EventOwener");

                    b.Navigation("InformantTypeLookup");
                });

            modelBuilder.Entity("AppDiv.CRVS.Domain.Entities.MarriageApplication", b =>
                {
                    b.HasOne("AppDiv.CRVS.Domain.Entities.Address", "ApplicationAddress")
                        .WithMany("MarriageApplications")
                        .HasForeignKey("ApplicationAddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AppDiv.CRVS.Domain.Entities.PersonalInfo", "BrideInfo")
                        .WithOne("MarriageApplicationBrideInfo")
                        .HasForeignKey("AppDiv.CRVS.Domain.Entities.MarriageApplication", "BrideInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AppDiv.CRVS.Domain.Entities.PersonalInfo", "CivilRegOfficer")
                        .WithOne("MarriageApplicationCivilRegOfficer")
                        .HasForeignKey("AppDiv.CRVS.Domain.Entities.MarriageApplication", "CivilRegOfficerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AppDiv.CRVS.Domain.Entities.PersonalInfo", "GroomInfo")
                        .WithOne("MarriageApplicationGroomInfo")
                        .HasForeignKey("AppDiv.CRVS.Domain.Entities.MarriageApplication", "GroomInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationAddress");

                    b.Navigation("BrideInfo");

                    b.Navigation("CivilRegOfficer");

                    b.Navigation("GroomInfo");
                });

            modelBuilder.Entity("AppDiv.CRVS.Domain.Entities.MarriageEvent", b =>
                {
                    b.HasOne("AppDiv.CRVS.Domain.Entities.MarriageApplication", "Application")
                        .WithOne("MarriageEvent")
                        .HasForeignKey("AppDiv.CRVS.Domain.Entities.MarriageEvent", "ApplicationId");

                    b.HasOne("AppDiv.CRVS.Domain.Entities.PersonalInfo", "BrideInfo")
                        .WithOne("MarriageEventBrideInfo")
                        .HasForeignKey("AppDiv.CRVS.Domain.Entities.MarriageEvent", "BrideInfoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AppDiv.CRVS.Domain.Entities.Event", "Event")
                        .WithOne("MarriageEvent")
                        .HasForeignKey("AppDiv.CRVS.Domain.Entities.MarriageEvent", "EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AppDiv.CRVS.Domain.Entities.Lookup", "MarriageType")
                        .WithMany("MarriageTypeNavigation")
                        .HasForeignKey("MarriageTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("BrideInfo");

                    b.Navigation("Event");

                    b.Navigation("MarriageType");
                });

            modelBuilder.Entity("AppDiv.CRVS.Domain.Entities.Payment", b =>
                {
                    b.HasOne("AppDiv.CRVS.Domain.Entities.PaymentRequest", "PaymentRequest")
                        .WithOne("Payment")
                        .HasForeignKey("AppDiv.CRVS.Domain.Entities.Payment", "PaymentRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AppDiv.CRVS.Domain.Entities.Lookup", "PaymentWayLookup")
                        .WithMany("PaymentNavigation")
                        .HasForeignKey("PaymentWayLookupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PaymentRequest");

                    b.Navigation("PaymentWayLookup");
                });

            modelBuilder.Entity("AppDiv.CRVS.Domain.Entities.PaymentExamption", b =>
                {
                    b.HasOne("AppDiv.CRVS.Domain.Entities.Event", "Event")
                        .WithOne("PaymentExamption")
                        .HasForeignKey("AppDiv.CRVS.Domain.Entities.PaymentExamption", "EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AppDiv.CRVS.Domain.Entities.PaymentExamptionRequest", "ExamptionRequest")
                        .WithOne("ExamptionRequestNavigation")
                        .HasForeignKey("AppDiv.CRVS.Domain.Entities.PaymentExamption", "ExamptionRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("ExamptionRequest");
                });

            modelBuilder.Entity("AppDiv.CRVS.Domain.Entities.PaymentRate", b =>
                {
                    b.HasOne("AppDiv.CRVS.Domain.Entities.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AppDiv.CRVS.Domain.Entities.Lookup", "EventLookup")
                        .WithMany()
                        .HasForeignKey("EventLookupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AppDiv.CRVS.Domain.Entities.Lookup", "PaymentTypeLookup")
                        .WithMany()
                        .HasForeignKey("PaymentTypeLookupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("EventLookup");

                    b.Navigation("PaymentTypeLookup");
                });

            modelBuilder.Entity("AppDiv.CRVS.Domain.Entities.PaymentRequest", b =>
                {
                    b.HasOne("AppDiv.CRVS.Domain.Entities.Event", "Event")
                        .WithOne("EventPaymentRequest")
                        .HasForeignKey("AppDiv.CRVS.Domain.Entities.PaymentRequest", "EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AppDiv.CRVS.Domain.Entities.PaymentRate", "PaymentRate")
                        .WithOne("PaymentRatePaymentRequest")
                        .HasForeignKey("AppDiv.CRVS.Domain.Entities.PaymentRequest", "PaymentRateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("PaymentRate");
                });

            modelBuilder.Entity("AppDiv.CRVS.Domain.Entities.PersonalInfo", b =>
                {
                    b.HasOne("AppDiv.CRVS.Domain.Entities.Address", "Address")
                        .WithMany("PersonalInfos")
                        .HasForeignKey("AddressId");

                    b.HasOne("AppDiv.CRVS.Domain.Entities.ContactInfo", "ContactInfo")
                        .WithMany()
                        .HasForeignKey("ContactInfoId");

                    b.HasOne("AppDiv.CRVS.Domain.Entities.Lookup", "EducationalStatusLookup")
                        .WithMany("PersonEducationalStatusNavigation")
                        .HasForeignKey("EducationalStatusLookupId");

                    b.HasOne("AppDiv.CRVS.Domain.Entities.Lookup", "MarraigeStatusLookup")
                        .WithMany("PersonMarriageStatusNavigation")
                        .HasForeignKey("MarriageStatusLookupId");

                    b.HasOne("AppDiv.CRVS.Domain.Entities.Lookup", "NationLookup")
                        .WithMany("PersonNationNavigation")
                        .HasForeignKey("NationLookupId");

                    b.HasOne("AppDiv.CRVS.Domain.Entities.Lookup", "NationalityLookup")
                        .WithMany("PersonNationalityNavigation")
                        .HasForeignKey("NationalityLookupId");

                    b.HasOne("AppDiv.CRVS.Domain.Entities.Lookup", "PlaceOfBirthLookup")
                        .WithMany("PersonPlaceOfBirthNavigation")
                        .HasForeignKey("PlaceOfBirthLookupId");

                    b.HasOne("AppDiv.CRVS.Domain.Entities.Lookup", "ReligionLookup")
                        .WithMany("PersonReligionNavigation")
                        .HasForeignKey("ReligionLookupId");

                    b.HasOne("AppDiv.CRVS.Domain.Entities.Lookup", "SexLookup")
                        .WithMany("PersonSexNavigation")
                        .HasForeignKey("SexLookupId");

                    b.HasOne("AppDiv.CRVS.Domain.Entities.Lookup", "TitleLookup")
                        .WithMany("PersonTitleNavigation")
                        .HasForeignKey("TitleLookupId");

                    b.HasOne("AppDiv.CRVS.Domain.Entities.Lookup", "TypeOfWorkLookup")
                        .WithMany("PersonTypeOfWorkNavigation")
                        .HasForeignKey("TypeOfWorkLookupId");

                    b.Navigation("Address");

                    b.Navigation("ContactInfo");

                    b.Navigation("EducationalStatusLookup");

                    b.Navigation("MarraigeStatusLookup");

                    b.Navigation("NationLookup");

                    b.Navigation("NationalityLookup");

                    b.Navigation("PlaceOfBirthLookup");

                    b.Navigation("ReligionLookup");

                    b.Navigation("SexLookup");

                    b.Navigation("TitleLookup");

                    b.Navigation("TypeOfWorkLookup");
                });

            modelBuilder.Entity("AppDiv.CRVS.Domain.Entities.Registrar", b =>
                {
                    b.HasOne("AppDiv.CRVS.Domain.Entities.Event", "Event")
                        .WithOne("EventRegistrar")
                        .HasForeignKey("AppDiv.CRVS.Domain.Entities.Registrar", "EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AppDiv.CRVS.Domain.Entities.PersonalInfo", "RegistrarInfo")
                        .WithOne("RegistrarPersonalInfoNavigation")
                        .HasForeignKey("AppDiv.CRVS.Domain.Entities.Registrar", "RegistrarInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AppDiv.CRVS.Domain.Entities.Lookup", "Relationship")
                        .WithMany("RelationshipNavigation")
                        .HasForeignKey("RelationshipId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("RegistrarInfo");

                    b.Navigation("Relationship");
                });

            modelBuilder.Entity("AppDiv.CRVS.Domain.Entities.Step", b =>
                {
                    b.HasOne("AppDiv.CRVS.Domain.Entities.UserGroup", "UserGroup")
                        .WithMany("Steps")
                        .HasForeignKey("UserGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AppDiv.CRVS.Domain.Entities.Workflow", "workflow")
                        .WithMany("Steps")
                        .HasForeignKey("workflowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserGroup");

                    b.Navigation("workflow");
                });

            modelBuilder.Entity("AppDiv.CRVS.Domain.Entities.SupportingDocument", b =>
                {
                    b.HasOne("AppDiv.CRVS.Domain.Entities.Event", "Event")
                        .WithMany("EventSupportingDocuments")
                        .HasForeignKey("EventId");

                    b.HasOne("AppDiv.CRVS.Domain.Entities.PaymentExamption", "PaymentExamption")
                        .WithMany("SupportingDocuments")
                        .HasForeignKey("PaymentExamptionId");

                    b.Navigation("Event");

                    b.Navigation("PaymentExamption");
                });

            modelBuilder.Entity("AppDiv.CRVS.Domain.Entities.Witness", b =>
                {
                    b.HasOne("AppDiv.CRVS.Domain.Entities.MarriageEvent", "MarriageEvent")
                        .WithMany("Witnesses")
                        .HasForeignKey("MarriageEventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AppDiv.CRVS.Domain.Entities.PersonalInfo", "WitnessPersonalInfo")
                        .WithOne("Witness")
                        .HasForeignKey("AppDiv.CRVS.Domain.Entities.Witness", "WitnessPersonalInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MarriageEvent");

                    b.Navigation("WitnessPersonalInfo");
                });

            modelBuilder.Entity("ApplicationUserUserGroup", b =>
                {
                    b.HasOne("AppDiv.CRVS.Domain.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("ApplicationUsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AppDiv.CRVS.Domain.Entities.UserGroup", null)
                        .WithMany()
                        .HasForeignKey("UserGroupsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("AppDiv.CRVS.Domain.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("AppDiv.CRVS.Domain.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AppDiv.CRVS.Domain.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("AppDiv.CRVS.Domain.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AppDiv.CRVS.Domain.Entities.Address", b =>
                {
                    b.Navigation("AddressBirthPlaceNavigation");

                    b.Navigation("BeforeAdoptionAddressNavigation")
                        .IsRequired();

                    b.Navigation("ChildAddresses");

                    b.Navigation("CourtAddress")
                        .IsRequired();

                    b.Navigation("EventAddresses");

                    b.Navigation("MarriageApplications");

                    b.Navigation("PersonalInfos");
                });

            modelBuilder.Entity("AppDiv.CRVS.Domain.Entities.BirthEvent", b =>
                {
                    b.Navigation("BirthNotification")
                        .IsRequired();
                });

            modelBuilder.Entity("AppDiv.CRVS.Domain.Entities.CourtCase", b =>
                {
                    b.Navigation("AdoptionEventCourtCase")
                        .IsRequired();

                    b.Navigation("DivorceEventCourtCase")
                        .IsRequired();
                });

            modelBuilder.Entity("AppDiv.CRVS.Domain.Entities.DeathEvent", b =>
                {
                    b.Navigation("DeathNotification")
                        .IsRequired();
                });

            modelBuilder.Entity("AppDiv.CRVS.Domain.Entities.Event", b =>
                {
                    b.Navigation("AdoptionEvent")
                        .IsRequired();

                    b.Navigation("BirthEvent")
                        .IsRequired();

                    b.Navigation("DeathEventNavigation")
                        .IsRequired();

                    b.Navigation("DivorceEvent")
                        .IsRequired();

                    b.Navigation("EventCertificates");

                    b.Navigation("EventPaymentRequest")
                        .IsRequired();

                    b.Navigation("EventRegistrar");

                    b.Navigation("EventSupportingDocuments");

                    b.Navigation("MarriageEvent")
                        .IsRequired();

                    b.Navigation("PaymentExamption")
                        .IsRequired();
                });

            modelBuilder.Entity("AppDiv.CRVS.Domain.Entities.Lookup", b =>
                {
                    b.Navigation("AddressAreaTypeNavigation");

                    b.Navigation("BirthFacilityNavigation");

                    b.Navigation("BirthFacilityTypeNavigation");

                    b.Navigation("BirthTypeOfBirthNavigation");

                    b.Navigation("CauseOfDeathInfoTypeNavigation");

                    b.Navigation("DeathFacilityNavigation");

                    b.Navigation("DeathFacilityTypeNavigation");

                    b.Navigation("DeliveryTypeNavigation");

                    b.Navigation("EventInformantTypeNavigation");

                    b.Navigation("MarriageTypeNavigation");

                    b.Navigation("PaymentNavigation");

                    b.Navigation("PersonEducationalStatusNavigation");

                    b.Navigation("PersonMarriageStatusNavigation");

                    b.Navigation("PersonNationNavigation");

                    b.Navigation("PersonNationalityNavigation");

                    b.Navigation("PersonPlaceOfBirthNavigation");

                    b.Navigation("PersonReligionNavigation");

                    b.Navigation("PersonSexNavigation");

                    b.Navigation("PersonTitleNavigation");

                    b.Navigation("PersonTypeOfWorkNavigation");

                    b.Navigation("RelationshipNavigation");

                    b.Navigation("SkilledProfNavigation");
                });

            modelBuilder.Entity("AppDiv.CRVS.Domain.Entities.MarriageApplication", b =>
                {
                    b.Navigation("MarriageEvent")
                        .IsRequired();
                });

            modelBuilder.Entity("AppDiv.CRVS.Domain.Entities.MarriageEvent", b =>
                {
                    b.Navigation("Witnesses");
                });

            modelBuilder.Entity("AppDiv.CRVS.Domain.Entities.PaymentExamption", b =>
                {
                    b.Navigation("SupportingDocuments");
                });

            modelBuilder.Entity("AppDiv.CRVS.Domain.Entities.PaymentExamptionRequest", b =>
                {
                    b.Navigation("ExamptionRequestNavigation")
                        .IsRequired();
                });

            modelBuilder.Entity("AppDiv.CRVS.Domain.Entities.PaymentRate", b =>
                {
                    b.Navigation("PaymentRatePaymentRequest")
                        .IsRequired();
                });

            modelBuilder.Entity("AppDiv.CRVS.Domain.Entities.PaymentRequest", b =>
                {
                    b.Navigation("Payment")
                        .IsRequired();
                });

            modelBuilder.Entity("AppDiv.CRVS.Domain.Entities.PersonalInfo", b =>
                {
                    b.Navigation("AdoptiveFatherNavigation")
                        .IsRequired();

                    b.Navigation("AdoptiveMotherNavigation")
                        .IsRequired();

                    b.Navigation("BirthFatherNavigation")
                        .IsRequired();

                    b.Navigation("BirthMotherNavigation")
                        .IsRequired();

                    b.Navigation("DivorceWifeNavigation")
                        .IsRequired();

                    b.Navigation("EventCivilRegOfficers");

                    b.Navigation("Events");

                    b.Navigation("MarriageApplicationBrideInfo")
                        .IsRequired();

                    b.Navigation("MarriageApplicationCivilRegOfficer")
                        .IsRequired();

                    b.Navigation("MarriageApplicationGroomInfo")
                        .IsRequired();

                    b.Navigation("MarriageEventBrideInfo")
                        .IsRequired();

                    b.Navigation("RegistrarPersonalInfoNavigation")
                        .IsRequired();

                    b.Navigation("Witness")
                        .IsRequired();
                });

            modelBuilder.Entity("AppDiv.CRVS.Domain.Entities.UserGroup", b =>
                {
                    b.Navigation("Steps");
                });

            modelBuilder.Entity("AppDiv.CRVS.Domain.Entities.Workflow", b =>
                {
                    b.Navigation("Steps");
                });
#pragma warning restore 612, 618
        }
    }
}
